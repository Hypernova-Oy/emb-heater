#!/usr/bin/perl

# Copyright 2016 Vaara-kirjastot
#

use Modern::Perl;
use Carp;
use Getopt::Long qw(:config no_ignore_case);
use POSIX();
use Data::Dumper;

use Heater;
use Heater::Config;

my $help;
my $verbose = 0;
my ($onPin,$offPin,$statisticsWriteInterval,$statisticsFile,
    $activationTemp, $targetTemp, $tempCorrection, $mainLoopInterval,
    $turnOn, $turnOff, $checkTemperature);


GetOptions(
    'h|help'                      => \$help,
    'v|verbose:i'                 => \$verbose,
    'on:i'                        => \$onPin,
    'off:i'                       => \$offPin,
    's:i'                         => \$statisticsWriteInterval,
    'sf:s'                        => \$statisticsFile,
    'at:f'                        => \$activationTemp,
    'tt:f'                        => \$targetTemp,
    'tc:f'                        => \$tempCorrection,
    'ml:f'                        => \$mainLoopInterval,
    'turnOn'                      => \$turnOn,
    'turnOff'                     => \$turnOff,
    'temperature'                 => \$checkTemperature,
);

my $usage = <<USAGE;

A temperature sensor controlled relay program.
Set configs at /etc/emb-heater/daemon.conf


  -v --verbose        Defaults to 0, no Log::Log4perl-adjustment.
                      1 increases log verbosity with one level.
                      -3 decreases it with 3.
                      Internally calls Log::Log4perl->appender_thresholds_adjust()
                      More preferred way is to use /etc/emb-heater/log4perl.conf

  -h --help           This HELP!

  --on                The BCM pin turning the heater relay on

  --off               The BCM pin turning the heater relay off

  --s                 How often temperature readings are written to disk in ms?
                      A negative value disables statistics gathering to a file.

  --sf                Path to where the temperature readings are stored?

  --at                At which degrees Celsius we start heating?
                      Default -20

  --tt                At which temperature we stop heating?
                      This is to prevent the relay flickering when the
                      temperature is close to the heating threshold.
                      Default -17

  --tc                Temperature correction in degrees Celsius.
                      Default -0.1

  --ml                MainLoopInterval. Float. This is useful for running tests. Don't change it.

  --turnOn            Simply turns the heater relay on.

  --turnOff           Simply turns the heater relay off.

  --temperature       Simply checks the temperature.

SIGNALS:

Heater listens to some IPC signals you can use to get information about the running process

SIGUSR1 - Dump the daemon object internals
SIGUSR2 - Get a temperature reading

EXAMPLES:

  heater
  heater --on 23 --off 24 --s 60000 --sf /var/log/emb-heater/temperatures

USAGE

if ($help) {
  print $usage;
  exit 0;
}


my $conf = Heater::Config::makeConfig(
              $onPin,$offPin,$activationTemp,$targetTemp,$tempCorrection,
              $statisticsWriteInterval,$statisticsFile, undef, undef, undef, undef,
              $verbose, $mainLoopInterval,
);
my $heater; #Instantiating the heater has side-effects, so postpone it until absolutely necessary.

##Introduce signal handlers
sub gracefullyTerminate {
  my ($signal) = @_;
  print "Exiting through signal '$signal'\n";
  exit(0); #Interrupt the handler to trigger graceful termination, including calling DESTROY on objects.
}
$SIG{USR1} = sub {
  print Data::Dumper::Dumper($heater);
};
$SIG{USR2} = sub {
  print $heater->temperatures()."\n";
};
$SIG{HUP} = sub {
  gracefullyTerminate($_[0]);
};
$SIG{INT} = sub {
  gracefullyTerminate($_[0]);
};



if ($checkTemperature) {
  my @tempSensorDevices = HiPi::Interface::DS18X20->list_slaves();
  Heater::Exception::Hardware::TemperatureSensor->throw(error => "No DS18X20-compatible temperature sensors detected on the one wire bus. Have you enabled the one-wire hardware device?")
    unless scalar(@tempSensorDevices);

  foreach my $device (@tempSensorDevices) {
    my $ds = HiPi::Interface::DS18X20->new(
      id         => $device->{id},
      correction => $conf->{TemperatureCorrection},
      divider    => 1000,
    );
    print $ds->temperature()."\n";
  }
  exit(0);
}


# We need to have the heater instantiated from now on.
$heater = Heater->new($conf);

if ($turnOn) {
  $heater->turnWarmingOn();
}
elsif ($turnOff) {
  $heater->turnWarmingOff();
}
else {
  $heater->start();
}
